<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
       	https://www.springframework.org/schema/mvc/spring-mvc.xsd">


	<mvc:annotation-driven />
        <!-- 告诉spring从哪个包下面扫描注解 -->
   	<context:component-scan base-package="com.ps.dorm" />

	<!--设置数据库-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"/>
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/spring"/>
		<property name="username" value="root"/>
		<property name="password" value="ps123456"/>
	</bean>

	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 自动扫描mappers.xml文件 -->
		<property name="mapperLocations" value="classpath:mapperXml/*.xml" />
		<!-- 注意其他配置 -->
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<property name="properties">
						<!--使用下面的方式配置参数，一行配置一个 -->
						<value>
							helperDialect=mysql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!-- 扫描器，扫描指定包下的接口，并且会自动创建对象 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 确定包的位置 -->
		<property name="basePackage" value="com.ps.dorm.mapper"/>
		<property name="sqlSessionFactory" ref="sqlSessionFactoryBean"/>
	</bean>

	<!--通知类-->
	<bean id="beforeAdvice" class="com.ps.dorm.aop.BeforeAdvice"/>
	<bean id="cacheProxy" class="com.ps.dorm.proxy.CacheProxy"/>
	<aop:config proxy-target-class="true">
		<!-- 切入點 -->
		<aop:pointcut expression="@annotation(com.ps.dorm.annotation.ShowLog)" id="pointcut"/>
		<aop:pointcut expression="@annotation(com.ps.dorm.annotation.Cache)" id="pointcut1"/>
		<!-- 通知應該要和切入點進行綁定 -->
		<aop:advisor advice-ref="beforeAdvice" pointcut-ref="pointcut"/>
		<aop:advisor advice-ref="cacheProxy" pointcut-ref="pointcut1"/>
	</aop:config>


	<!--拦截器的配置-->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**"/>
			<bean class="com.ps.dorm.typeHandler.AuthInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
</beans>